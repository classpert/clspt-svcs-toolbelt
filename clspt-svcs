#!/usr/bin/env bash
version=0.1.0

RED=$(tput setaf 1)
GREEN=$(tput setaf 2)
YELLOW=$(tput setaf 3)
BLUE=$(tput setaf 4)
MAGENTA=$(tput setaf 5)
NORMAL=$(tput sgr0)

svcname=$2;

export DOLLAR='$' APP_NAME=$svcname;

USAGE="\
Usage: clspt-svcs [command] [service-name] [options]

Options:
  -d            set directory, defaults to ./[service-name]

Commands:
  create        create a new project using [service-name]
  destroy       destroy project using [service-name]
  update-core   updates svcs-core for [service-name]
"

# boilerplate files
read -r -d '' GITIGNORE_TPL <<-EOF
.deps.local.toml
/depends-on/
/envs/local*
/makefiles/local.mk
docker-compose.*.yml
/src/node_modules/
.init-lock
EOF

read -r -d '' TOML_TPL <<-EOF
# Add depends-on services here, ex.:
# [svc-db]
# dir="./depends-on/svc-db"
EOF

read -r -d '' ENVS_TPL <<-EOF
# Add your environment variables here
EOF

# docker-compose meta files
read -r -d '' DC_BASE_TPL <<-EOF
version: '3.7'
services:
  \${APP_NAME}:
    image: \${DOLLAR}APP_IMAGE
#    build:
#    context: .
#    args:
#      - APP_BASE_IMAGE=\${DOLLAR}APP_BASE_IMAGE
EOF

read -r -d '' DC_LOCAL_TPL <<-EOF
version: '3.7'
services:
  \${APP_NAME}:
#    env_file:
#    - ./envs/local.env
EOF


read -r -d '' DC_ENV_TPL <<-EOF
version: '3.7'
services:
  \${APP_NAME}:
    networks:
      - \${DOLLAR}{DOCKER_NETWORK}
#    environment:
#      - VIRTUAL_HOST=\${DOLLAR}APP_NAME.\${DOLLAR}DOCKER_NETWORK
    env_file:
      - ./envs/\${DOLLAR}ENV.env
#    volumes:
#      - \${DOLLAR}APP_NAME_\${DOLLAR}DOCKER_NETWORK

#volumes:
#  \${APP_NAME}_\${DOCKER_NETWORK}:
#    name: \${DOLLAR}APP_NAME_\${DOLLAR}DOCKER_NETWORK

networks:
  \${DOCKER_NETWORK}:
    external: true
    name: \${DOLLAR}DOCKER_NETWORK
EOF

function error {
  echo -e "$1" >&2
  exit 1
}

function usage_help {
  error "$USAGE"
}

function create_structure {
  root_dir=$(pwd)/$svcname

  mkdir -p $svcname

  printf "${GREEN}Created project skeleton\n"
  printf "${NORMAL}$root_dir\n"

  if [ ! -e $svcname/dc-template-files ]; then
    mkdir -p $svcname/dc-template-files;
    printf "${GREEN}Created directory\n"
    printf "${NORMAL}$root_dir/dc-template-files\n"
  fi

  if [ ! -f $svcname/dc-template-files/docker-compose.base.yml.template ]; then
    echo "$DC_BASE_TPL" > $svcname/dc-template-files/docker-compose.base.yml.template
    printf "${GREEN}Created file\n"
    printf "${NORMAL}$root_dir/dc-template-files/docker-compose.base.yml.template\n"
  fi

  if [ ! -f $svcname/dc-template-files/docker-compose.local.yml.template ]; then
    echo "$DC_LOCAL_TPL" > $svcname/dc-template-files/docker-compose.local.yml.template
    printf "${GREEN}Created file\n"
    printf "${NORMAL}$root_dir/dc-template-files/docker-compose.local.yml.template\n"
  fi

  if [ ! -f $svcname/dc-template-files/docker-compose.dev.yml.template ]; then
    echo "$DC_ENV_TPL" > $svcname/dc-template-files/docker-compose.dev.yml.template
    printf "${GREEN}Created file\n"
    printf "${NORMAL}$root_dir/dc-template-files/docker-compose.dev.yml.template\n"
  fi

  if [ ! -f $svcname/.gitignore ]; then
    echo "$GITIGNORE_TPL" > $svcname/.gitignore
    printf "${GREEN}Created file\n"
    printf "${NORMAL}$root_dir/.gitignore\n"
  fi

  if [ ! -f $svcname/.gitignore ]; then
    echo "$GITIGNORE_TPL" > $svcname/.gitignore
    printf "${GREEN}Created file\n"
    printf "${NORMAL}$root_dir/.gitignore\n"
  fi

  if [ ! -e $svcname/envs ]; then
    mkdir -p $svcname/envs;
    printf "${GREEN}Created directory\n"
    printf "${NORMAL}$root_dir/envs\n"
  fi

  for e in "dev" "test" "local.dev"; do
    if [ ! -f $svcname/envs/$e.env ]; then
      echo "$ENVS_TPL" > $svcname/envs/$e.env
      printf "${GREEN}Created file\n"
      printf "${NORMAL}$root_dir/envs/$e.env\n"
    fi
  done

  for e in "dev" "test" "local"; do
    if [ ! -f $svcname/.deps.$e.toml ]; then
      echo "$TOML_TPL" > $svcname/.deps.$e.toml
      printf "${GREEN}Created file\n"
      printf "${NORMAL}$root_dir/.deps.$e.toml\n"
    fi
  done

  printf "${YELLOW}Create empty Dockerfile? Type [Y/n]\n"
  printf "${NORMAL}Type [n] if you'll be using a third-party image in your docker-compose file\n"
  read -s option
  if [ $option == "Y" ]; then
    touch $svcname/Dockerfile
    echo "Dockerfile" > $svcname/.docker-image-depends-on-files
    printf "${GREEN}Created files\n"
    printf "${NORMAL}${root_dir}/Dockerfile\n"
    printf "${NORMAL}${root_dir}/.docker-image-depends-on-files\n"
  else
    printf "${NORMAL}Dockerfile skipped\n"
  fi

  printf "${YELLOW}Create skeleton for tests? Type [Y/n]\n"
  read -s option
  if [ $option == "Y" ]; then
    if [ ! -f $svcname/dc-template-files/docker-compose.test.yml.template ]; then
      echo "$DC_ENV_TPL" > $svcname/dc-template-files/docker-compose.test.yml.template
      printf "${GREEN}Created file\n"
      printf "${NORMAL}${root_dir}/dc-template-files/docker-compose.test.yml.template\n"
    fi

    if [ ! -f $svcname/makefiles/test.mk ]; then
      mkdir -p $svcname/makefiles
      touch $svcname/makefiles/test.mk
      printf "${GREEN}Created file\n"
      printf "${NORMAL}${root_dir}/makefiles/test.mk\n"
    fi
  else
    printf "${NORMAL}Skeleton for tests skipped\n"
  fi
}

function create_docker_compose_base_template_file {
  echo "$DC_BASE_TPL" > $svcname/dc-template-files/docker-compose.base.yml.template
}

function create_docker_compose_dev_template_file() {
  echo "$DC_DEV_TPL" > $svcname/dc-template-files/docker-compose.dev.yml.template
}

function create_docker_compose_test_template_file() {
  echo "$DC_TEST_TPL" > $svcname/dc-template-files/docker-compose.test.yml.template
}

function command_update_svcs_core {
  ENVSUBST_VARS='$DOLLAR:$APP_NAME';

  repo="git@github.com:classpert/svcs-core.git"
  build_dir=/tmp/svcs-core

  git clone $repo --depth=1 $build_dir

  mv $build_dir/Makefile $build_dir/Makefile.envsubst
  envsubst "$ENVSUBST_VARS" < $build_dir/Makefile.envsubst > $build_dir/Makefile

  rm $build_dir/Makefile.envsubst
  rm -rf $build_dir/.git

  # Destroy current files
  rm -rf ./core-bin
  rm -f Makefile

  # Copy new installation
  cp -r $build_dir/* $svcname

  # Destroy build dir
  rm -rf $build_dir
}

function command_create {
  if [ ! -e $svcname ]; then
    create_structure
    command_update_svcs_core
  else
    printf "%s\n" "${RED}Project ${svcname} already exists under $(pwd)"
    printf "%s\n" "${NORMAL}If you want re-create it, run [${YELLOW}clspt-svcs destroy ${svcname}${NORMAL}] or choose a different name"
  fi
}

function command_destroy {
  if [ -e $svcname ]; then
    printf "${RED}Are you sure you want to remove $svcname?${NORMAL} Type [Y/n] \n${NORMAL}"
    read -s option
    if [ $option == "Y" ]; then
      printf "Destroying ${svcname}... \n"
      rm -rf $svcname
    fi
  else
    printf "Nothing to destroy... \n"
  fi
}

case $# in
  0) usage_help;;
esac

case $1 in
  --help|-h) echo -e "$USAGE"; exit 0;;
  create) shift; command_create "$@";;
  destroy) shift; command_destroy "$@";;
  update-core) shift; command_update_svcs_core "$@";;
  *) echo "Unknown arguments: $*"; usage_help;;
esac
